from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.users.command_handlers import process_start_command
from loader import dp, bot, config
from aiogram import types
from keyboards.inline_keyboards import inline_main_menu, inline_make_order
from utils.logger import send_log
import re, random


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), content_types=['text'])
async def message_communication(message: types.Message):
    if re.findall(r'–∫—É–ø.*|–∑–∞–∫–∞–∑', message.text):
        await send_log('INFO', message.from_user.username, '–í–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω | –¢–µ–º–∞—Ç–∏–∫–∞ –∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å | –°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(message.text))
        await bot.send_message(message.from_user.id, f"–î–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ /menu –∫–Ω–æ–ø–∫—É –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", parse_mode='html')
    elif re.findall(r'–ø–æ–∑–≤–æ–Ω.*|–∑–≤–æ–Ω.*|–∫–æ–Ω—Ç–∞–∫.*|—Å–≤—è–∑.*|–ø–∏—Å.*', message.text):
        await send_log('INFO', message.from_user.username, '–í–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω | –¢–µ–º–∞—Ç–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã | –°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(message.text))
        await bot.send_message(message.from_user.id, f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤ /menu –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏", parse_mode='html')
    elif re.findall(r'—Ü–µ–Ω.*|—Å—Ç–æ–∏–º.*|—Å—Ç–æ–∏—Ç', message.text):
        await send_log('INFO', message.from_user.username, '–í–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω | –¢–µ–º–∞—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å | –°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(message.text))
        cost_answers = ['–¶–µ–Ω—ã –ø—Ä–∏—è—Ç–Ω—ã–µ', '–¶–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ', '–¶–µ–Ω—ã –Ω–µ –∫—É—Å–∞—é—Ç—Å—è', '–¶–µ–Ω—ã —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ', '–¶–µ–Ω—ã –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ']
        await bot.send_message(message.from_user.id, random.choice(cost_answers), parse_mode='html', reply_markup=InlineKeyboardMarkup().add(inline_make_order))
    elif re.findall(r'–¥–æ–±—Ä–∞—Ç—å—Å—è.*|–¥–æ–±—Ä.*|–¥–æ–µ—Ö–∞.*|–¥–æ–π—Ç–∏|–Ω–∞—Ö–æ–¥–∏—Ç.*', message.text):
        await send_log('INFO', message.from_user.username, '–í–æ–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω | –¢–µ–º–∞—Ç–∏–∫–∞ –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è | –°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(message.text))
        await bot.send_message(message.from_user.id, f"üöï –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏, –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n"
                                                     f"üìå –ò–ª–∏ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±—Ä–∞—Ç—å—Å—è —Å–∞–º–∏, –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n"
                                                     f"<b>{config['contacts']['address']}</b>", parse_mode='html', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', url=config['taxi_api_url'])))
    else:
        await send_log('WARNING', message.from_user.username, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å | –°–æ–æ–±—â–µ–Ω–∏–µ: {}'.format(message.text))
        await bot.send_message(message.from_user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –º–µ–Ω—é.", parse_mode='html', reply_markup=inline_main_menu)

