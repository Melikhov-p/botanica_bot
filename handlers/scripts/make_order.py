import asyncio
import os
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.logger import send_log
from keyboards.inline_keyboards import inline_confirm_reject_kb
from loader import dp, bot, config
from aiogram import types
from states.BasicStates import OrderState

# --- –°–¶–ï–ù–ê–†–ò–ô –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê --- #
@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'make_order')
async def process_callback_start_make_order(callback: types.CallbackQuery):
    await send_log('INFO', callback.from_user.username, '–ù–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞')
    await bot.send_message(callback.from_user.id, f"–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel", parse_mode='html')
    await OrderState.products.set()
    await bot.send_message(callback.from_user.id, f"–ö–∞–∫–æ–π –±—É–∫–µ—Ç –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å?\n\n"
                                                  f"–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Ñ–æ—Ç–æ.", parse_mode='html')


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.products, content_types=['photo', 'text'])
async def process_message_get_ready_order_date(message: types.Message, state: FSMContext):
    await send_log('INFO', message.from_user.username, '–£–∫–∞–∑–∞–ª —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ | –°–æ–æ–±—â–µ–Ω–∏–µ {}'.format(message.text))
    if message.photo:
        await state.update_data(products=message.photo[-1].file_id)
        await state.update_data(is_products_photo=True)
    else:
        await state.update_data(products=message.text)
        await state.update_data(is_products_photo=False)
    await OrderState.ready_date.set()
    await bot.send_message(message.from_user.id, f"–ö–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤?")


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.ready_date)
async def process_message_need_delivery(message: types.Message, state: FSMContext):
    await state.update_data(ready_date=message.text)
    await OrderState.delivery.set()
    await bot.send_message(message.from_user.id, '–î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑?', reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–∫–∞', callback_data='inline_delivery_true'),
                                                                                                                    InlineKeyboardButton('–°–∞–º–æ–≤—ã–≤–æ–∑', callback_data='inline_delivery_false')))


@dp.callback_query_handler(lambda callback: callback.data == 'inline_delivery_true' or callback.data == 'inline_delivery_false',
                           ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.delivery)
async def process_callback_get_delivery_date_order(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'inline_delivery_true':
        await state.update_data(delivery='–Ω—É–∂–Ω–∞:')
        await OrderState.delivery_address.set()
        await bot.send_message(callback.from_user.id, f"–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å?")
    else:
        await state.update_data(delivery='–Ω–µ –Ω—É–∂–Ω–∞')
        await state.update_data(delivery_address='')
        await state.update_data(delivery_recipient='')
        await OrderState.contact.set()
        await bot.send_message(callback.from_user.id, f"–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏.")


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.delivery_address)
async def process_callback_get_delivery_recipient(message: types.Message, state: FSMContext):
    await state.update_data(delivery_address=message.text)
    await OrderState.delivery_recipient.set()
    await bot.send_message(message.from_user.id, f"–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç <u>–ø–æ–ª—É—á–∞—Ç–µ–ª—è</u> (–∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –¥–ª—è —Å–≤—è–∑–∏.", parse_mode='html')


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.delivery_recipient)
async def process_message_get_contact(message: types.Message, state: FSMContext):
    await state.update_data(delivery_recipient=f"\n\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {message.text}")
    await OrderState.contact.set()
    await bot.send_message(message.from_user.id, f"–û—Å—Ç–∞–≤—å—Ç–µ <u>–≤–∞—à</u> –∫–æ–Ω—Ç–∞–∫—Ç (–∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –¥–ª—è —Å–≤—è–∑–∏.", parse_mode='html')


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.contact)
async def process_message_confirm_order(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    order_data = await state.get_data()
    await OrderState.confirm.set()
    if order_data['is_products_photo']:
        await bot.send_photo(message.from_user.id, photo=order_data['products'], caption=f"–ò—Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑\n\n"
                                                                                         f"üíê –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç: –Ω–∞ —Ñ–æ—Ç–æ ‚¨ÜÔ∏è\n\n"
                                                                                         f"‚û° –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤: {order_data['ready_date']}\n\n"
                                                                                         f"üöï –î–æ—Å—Ç–∞–≤–∫–∞ {order_data['delivery']} {order_data['delivery_address']} {order_data['delivery_recipient']}\n\n"
                                                                                         f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order_data['contact']}")
    else:
        await bot.send_message(message.from_user.id, f"–ò—Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–∫–∞–∑\n\n"
                                                     f"üíê –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç: {order_data['products']}\n\n"
                                                     f"‚û° –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤: {order_data['ready_date']}\n\n"
                                                     f"üöï –î–æ—Å—Ç–∞–≤–∫–∞ {order_data['delivery']} {order_data['delivery_address']} {order_data['delivery_recipient']}\n\n"
                                                     f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order_data['contact']}")
    await bot.send_message(message.from_user.id, '–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=inline_confirm_reject_kb)


@dp.callback_query_handler(lambda c: c.data == 'confirm_yes', ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.confirm)
async def process_order_confirmed(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(confirm=callback.data)
    order_data = await state.get_data()
    if order_data['is_products_photo']:
        await bot.send_photo(config['moders_chat'], photo=order_data['products'], caption=f"üî¥ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ üî¥ : @{callback.from_user.username} : {callback.from_user.id}\n\n"
                                                                                          f"üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞: <u>–ø–æ —Ñ–æ—Ç–æ</u>\n\n"
                                                                                          f"‚û°Ô∏è –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ {order_data['ready_date']}\n\n"
                                                                                          f"üöï –î–æ—Å—Ç–∞–≤–∫–∞ {order_data['delivery']} {order_data['delivery_address']} {order_data['delivery_recipient']}\n\n"
                                                                                          f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order_data['contact']}", parse_mode='html')
    else:
        await bot.send_message(config['moders_chat'], f"üî¥ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ üî¥ : @{callback.from_user.username} : {callback.from_user.id}\n\n"
                                                      f"üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞: {order_data['products']}\n\n"
                                                      f"‚û°Ô∏è –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ {order_data['ready_date']}\n\n"
                                                      f"üöï –î–æ—Å—Ç–∞–≤–∫–∞ {order_data['delivery']} {order_data['delivery_address']} {order_data['delivery_recipient']}\n\n"
                                                      f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {order_data['contact']}", parse_mode='html')
    await bot.send_message(callback.from_user.id, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n'
                                                  '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é /menu', parse_mode='html')
    await send_log('INFO', callback.from_user.username, '–°–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑')
    await state.finish()
@dp.callback_query_handler(lambda c: c.data == 'confirm_no', ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=OrderState.confirm)  # –ï—Å–ª–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏
async def process_decline_send_beat_in_channel(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, f'–õ–∞–¥–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.', parse_mode='html')
    await state.finish()
    await process_callback_start_make_order(callback)
