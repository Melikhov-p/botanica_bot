import json
import re
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.users.command_handlers import process_start_command
from utils.logger import send_log
from keyboards.inline_keyboards import inline_main_menu
from loader import dp, bot, config
from aiogram import types
from states.BasicStates import ReportState, AskQuestionState


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'contacts')
async def process_callback_contacts(callback: types.CallbackQuery):
    await send_log('INFO', callback.from_user.username, '–ó–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã')
    await bot.send_message(callback.from_user.id, f"–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:\n\n"
                                                  f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {config['contacts']['phone']}\n\n"
                                                  f"üìß <b>Email</b>: {config['contacts']['email']}\n\n"
                                                  f"üìç <b>–ê–¥—Ä–µ—Å</b>: {config['contacts']['address']}", parse_mode='html')


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'all_products')
async def process_callback_all_products(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, f"üå∑ –ú–∞–ª–µ–Ω—å–∫–∏–π –±—É–∫–µ—Ç - –¥–∞—Ä–æ–º \n\n"
                                                  f"üåπ –°—Ä–µ–¥–Ω–∏–π –±—É–∫–µ—Ç - –¥–æ–ø–ª–∞—Ç–∏–º —Å–∞–º–∏ \n\n"
                                                  f"üíê –ë–æ–ª—å—à–æ–π –±—É–∫–µ—Ç - –ó–∞–±–∏—Ä–∞–π—Ç–µ –≤–µ—Å—å –º–∞–≥–∞–∑–∏–Ω", parse_mode='html')


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'get_taxi')
async def process_callback_get_taxi(callback: types.CallbackQuery):
    await send_log('INFO', callback.from_user.username, '–í—ã–±—Ä–∞–ª –≤—ã–∑–æ–≤ —Ç–∞–∫—Å–∏')
    await bot.send_message(callback.from_user.id, f"üöï –î–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üöï ",
                           parse_mode='html',
                           reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–ü—Ä–æ–ª–æ–∂–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', url=config['taxi_api_url'])))


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'report')
async def user_callback_report(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, f"üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É", parse_mode='html')
    await ReportState.report.set()
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=ReportState.report)
async def user_message_get_report(message: types.Message, state: FSMContext):
    await send_log('INFO', message.from_user.username, '–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º')
    await bot.send_message(config['superuser'], f"üìõ REPORT –æ—Ç @{message.from_user.username}:\n\n"
                                                f"{message.text}", parse_mode='html')
    await bot.send_message(message.from_user.id, f"–Ø —Å–æ–æ–±—â–∏–ª –æ –≤–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚ù§Ô∏è", parse_mode='html')
    await state.finish()
    await process_start_command(message)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), lambda callback: callback.data == 'ask_question')
async def user_callback_ask_question(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, f"üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.", parse_mode='html')
    await AskQuestionState.question.set()
@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=AskQuestionState.question)
async def user_message_get_question(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, f"–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", parse_mode='html')
    await bot.send_message(config['moders_chat'], f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username} ({message.from_user.id})\n\n"
                                                  f"{message.text}", parse_mode='html')
    await send_log('INFO', message.from_user.username, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º {}'.format(message.text))
    await state.finish()
    await process_start_command(message)
